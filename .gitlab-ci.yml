stages:
  - build
  - release

variables:
  ARTIFACT_NAME: ''

cache:
  paths:
    - node_modules/

pack:
  stage: build
  image: node:lts
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/
      when: on_success
    - when: manual
      allow_failure: false
  before_script:
    - npm ci
  script:
    - npm pack
    - export ARTIFACT_FILES=$(ls -1 *.tgz *.zip *.stx 2>/dev/null | tr '\n' ' ')
    - if [ -z "$ARTIFACT_FILES" ]; then echo "No artifacts found!"; exit 1; fi
    - echo "ARTIFACT_FILES=${ARTIFACT_FILES}" > artifact.env
    - 'echo "Found artifacts: ${ARTIFACT_FILES}"'
  artifacts:
    paths:
      - '*.tgz'
      - '*.zip'
      - '*.stx'
    reports:
      dotenv: artifact.env

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: ['pack']
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/
    - when: manual
      exists: [tags]
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: |
      Release ${CI_COMMIT_TAG}
      Includes following artifacts:
      ${ARTIFACT_FILES}
    assets:
      links:
        - name: 'Release artifacts'
          url: '${CI_JOB_URL}/artifacts/download'
        - name: 'Direct artifact links'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/'
    prerelease: $([[ "$CI_COMMIT_TAG" =~ - ]] && echo "true" || echo "false")
  dependencies:
    - pack
