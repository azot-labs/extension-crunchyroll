stages:
  - build
  - release

variables:
  ARTIFACT_FILES: ''

cache:
  paths:
    - node_modules/

pack:
  stage: build
  image: node:lts
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/
      when: on_success
    - when: manual
      allow_failure: false
  before_script:
    - npm ci
  script:
    - npm pack
    - ARTIFACT_FILES=$(ls *.zip *.tgz *.stx 2>/dev/null || true)
    - |
      if [ -z "$ARTIFACT_FILES" ]; then
        echo "Error: No artifacts found."
        exit 1
      fi
    - |
      echo "Found artifacts: $ARTIFACT_FILES"
    - |
      for file in $ARTIFACT_FILES; do
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
          --upload-file "$file" \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/$file"
      done
    - |
      echo "$ARTIFACT_FILES" | tr ' ' '\n' > artifacts.txt
  artifacts:
    paths:
      - artifacts.txt

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: ['pack']
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/
      when: on_success
    - when: manual
  script:
    - ASSETS=""
    - while read -r file; do
      ASSETS="$ASSETS --assets-link '{\"name\":\"$file\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/$file\"}'"
      done < artifacts.txt
    - eval release-cli create --name "Release $CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG" --description "Release $CI_COMMIT_TAG created automatically. Includes bundled library packages." $ASSETS
